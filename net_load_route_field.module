<?php

function net_load_route_field_field_info() {
  return array(
    'load_route' => array(
      'label' => t('Load Route'),
      'description' => t("Pickup and delivery locations for a load"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'load_route_widget',
      'default_formatter' => 'net_load_route_googlemaps_dynamic',
    )
  );
}

function net_load_route_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // ...
  }
}

function net_load_route_field_field_is_empty($item, $field) {
  //die('net_load_route_field_field_is_empty');
  if (empty($item['lat_p']) && (string) $item['lat_p'] !== '0'
   && empty($item['lng_p']) && (string) $item['lng_p'] !== '0'
   && empty($item['lat_d']) && (string) $item['lat_d'] !== '0'
   && empty($item['lng_d']) && (string) $item['lng_d'] !== '0') {
    return TRUE;
  }
}

function net_load_route_field_field_widget_info() {
  return array(
    'load_route_widget' => array(
      'label' => t('Load Route Widget'),
      'field types' => array('load_route'),
    )
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function net_load_route_field_field_formatter_info() {
  return array(
    'net_load_route_googlemaps_static' => array(
      'label' => t('Static Google Map'),
      'field types' => array('load_route'),
      'settings' => array(
        'map_width' => '300px',
        'map_height' => '300px',
        'map_zoomlevel' => '7',
        'map_imageformat' => 'png8',
        'map_maptype' => 'roadmap',
        'marker_icon' => '',
      ),
    ),
    'net_load_route_googlemaps_dynamic' => array(
      'label' => t('Dynamic Google Map'),
      'field types' => array('load_route'),
      'settings' => array(
        'map_width' => '300px',
        'map_height' => '300px',
        'map_zoomlevel' => '7',
        'map_imageformat' => 'png8',
        'map_maptype' => 'roadmap',
        'marker_icon' => '',
        'map_scrollwheel' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function net_load_route_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $element = array();

  // Implement some configuration options.
  // http://code.google.com/intl/en/apis/maps/documentation/staticmaps/
  $element['map_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Map width'),
    '#description' => t('Enter custom map width (e.g. 300px or 300%), default is 300px. Percentages do not work with static maps.'),
    '#default_value' => $settings['map_width'],
  );

  $element['map_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Map height'),
    '#description' => t('Enter custom map height (e.g. 300px or 300%), default is 300px. Percentages do not work with static maps.'),
    '#default_value' => $settings['map_height'],
  );

  $element['marker_icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Marker icon'),
    '#description' => t('Set the path to the icon marker you wish to use. Path can be absolute (with http://) or relative to the Drupal instalation. If left blank, the default will be used'),
    '#default_value' => $settings['marker_icon'],
  );

  // Image format is used only for static maps.
  switch ($type) {
    case 'net_load_route_googlemaps_static':
      $element['map_imageformat'] = array(
        '#type' => 'select',
        '#title' => t('Image format'),
        '#options' => array(
          'png8' => '8-bit PNG (default)',
          'png32' => '32-bit PNG',
          'gif' => 'GIF',
          'jpg' => 'JPEG',
          'jpg-baseline' => 'JPEG (non-progressive)',
        ),
        '#description' => t('Choose an Image Format. jpg and jpg-baseline typically provide the smallest image size, though they do so through "lossy" compression which may degrade the image. gif, png8 and png32 provide lossless compression.'),
        '#default_value' => $settings['map_imageformat'],
      );
      break;

    case 'net_load_route_googlemaps_dynamic':
      $element['map_scrollwheel'] = array(
        '#type' => 'checkbox',
        '#title' => t('Scroll Zoom'),
        '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
        '#default_value' => $settings['map_scrollwheel'],
      );
      break;
  }

  $element['map_maptype'] = array(
    '#type' => 'select',
    '#title' => t('Map Type'),
    '#options' => array(
      'roadmap' => 'Roadmap (default)',
      'satellite' => 'Satellite',
      'terrain' => 'Terrain',
      'hybrid' => 'Hybrid',
    ),
    '#description' => t('Choose map type. <em>roadmap</em> (default) specifies a standard roadmap image, as is normally shown on the Google Maps website. <em>satellite</em> specifies a satellite image. <em>terrain</em> specifies a physical relief map image, showing terrain and vegetation. <em>hybrid</em> specifies a hybrid of the satellite and roadmap image, showing a transparent layer of major streets and place names on the satellite image.'),
    '#default_value' => $settings['map_maptype'],
  );

  $element['map_zoomlevel'] = array(
    '#type' => 'select',
    '#title' => t('Zoom level'),
    '#options' => array(
      '1' => '1',
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '6' => '6',
      '7' => '7 (default)',
      '8' => '8',
      '9' => '9',
      '10' => '10',
      '11' => '11',
      '12' => '12',
      '13' => '13',
      '14' => '14',
      '15' => '15',
      '16' => '16',
      '17' => '17',
      '18' => '18',
      '19' => '19',
    ),
    '#description' => t('Choose a custom zoom level - the higher the number the closer. <em>High zoom warning:</em> Google might not return images for any combination of Map Type and Zoom Level.'),
    '#default_value' => $settings['map_zoomlevel'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function net_load_route_field_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $summary = t("<strong>Map:</strong> !mapwidth by !mapheight", array('!mapwidth' => $settings['map_width'], '!mapheight' => $settings['map_height']));
  switch ($type) {
    case 'net_load_route_googlemaps_static':
      $summary .= ' (' . $settings['map_imageformat'] . ')';
      $summary .= '<br />';
      break;

    case 'net_load_route_googlemaps_dynamic':
      $summary .= '<br />';
      $scrl = $settings['map_scrollwheel'] ? t('Yes') : t('No');
      $summary .= '<strong>Scrollable:</strong> ' . $scrl . '<br />';
      break;
  }
  $summary .= '<strong>Type:</strong> ' . $settings['map_maptype'] . '<br />';
  $summary .= '<strong>Zoom:</strong> ' . $settings['map_zoomlevel'];
  if (!empty($settings['marker_icon'])) {
    $vars = array(
      'path' => $settings['marker_icon'],
    );
    $summary .= '<br /><strong>Icon:</strong> ' . theme('image', $vars);
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function net_load_route_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $settings = $display['settings'];
  $element = array();
  $lat_key = 'lat_p';

  if (strpos($settings['map_height'], 'px')) {
    $height = strtok($settings['map_height'], 'p');
  }
  elseif (strpos($settings['map_height'], '%')) {
    $height = strtok($settings['map_height'], '%');
  }
  elseif (!strpos($settings['map_height'], '%') || !strpos($settings['map_height'], 'px')) {
    $height = $settings['map_height'];
  }

  if (strpos($settings['map_width'], 'px')) {
    $width = strtok($settings['map_width'], 'p');
  }
  elseif (strpos($settings['map_width'], '%')) {
    $width = strtok($settings['map_width'], '%');
  }
  elseif (!strpos($settings['map_width'], '%') || !strpos($settings['map_width'], 'px')) {
    $width = $settings['map_width'];
  }

  //TODO: need 2 lats and longs

  // To make this widget compatible with geofiled we need to rename the keys for
  // longitude. Geofield uses "lon" while Geolocation Field uses "lng".
  $lng_key = 'lng_p'; //($field['type'] == 'geofield') ? 'lon' : 'lng';

  switch ($display['type']) {

    case 'net_load_route_googlemaps_static':
      foreach ($items as $delta => $item) {
        $query = array(
          'sensor' => 'false',
          'zoom' => $settings['map_zoomlevel'],
          'size' => $width . "x" . $height,
          'format' => $settings['map_imageformat'],
          'maptype' => $settings['map_maptype'],
          'markers' => 'size:mid|color:red|' . $item[$lat_key] . ',' . $item[$lng_key],
        );
        if ($settings['marker_icon']) {
          $path = file_create_url($settings['marker_icon']);
          $query['markers'] = 'icon:' . $path . '|' . $query['markers'];
        }
        $variables = array(
          'path' => url('//maps.google.com/maps/api/staticmap', array('query' => $query, 'external' => TRUE)),
          'alt' => 'Geolocation',
          'attributes' => array('class' => 'net-load-route-googlemaps-static'),
        );
        $map_img = theme('image', $variables);
        $element[$delta]['#markup'] = '<div>' . $map_img . '</div>';
      }
      break;

    case 'net_load_route_googlemaps_dynamic':
      
      $info = entity_get_info($entity_type);
      $key = isset($info['entity keys']['name']) ? $info['entity keys']['name'] : $info['entity keys']['id'];
      $eid = $entity->$key;

      foreach ($items as $delta => $item) {

      $width = $settings['map_width'];
      $height = $settings['map_height'];

        $id = 'net-load-route-googlemaps-dynamic-' . 'e_' . $eid . 'i_' . $instance['id'] . '-d_' . $delta;
        $map_element['googlemap'] = array(
          '#prefix' => '<div id="' . $id . '" class="net-load-route-map net-load-route-googlemaps-dynamic" ' . ' style="width:' . htmlentities($width) . ';height:' . htmlentities($height) . ';">',
          '#suffix' => '</div>',
        );

        //TODO: javascript?

        // Attach CSS and JS files via FAPI '#attached'.
        $map_element['googlemap']['#attached']['css'][] = drupal_get_path('module', 'net_load_route_field') . '/net_load_route_field.css';
        $map_element['googlemap']['#attached']['js'][] = array(
          'data' => '//maps.google.com/maps/api/js?sensor=false',
          'type' => 'external',
        );
        $map_element['googlemap']['#attached']['js'][] = array(
          'data' => '//www.google.com/jsapi',
          'type' => 'external',
        );
        $map_element['googlemap']['#attached']['js'][] = array(
          'data' => drupal_get_path('module', 'net_load_route_field') . '/net_load_route_field_dynamic_formatter.js',
          'type' => 'file',
          'scope' => 'footer',
        );

        // Create correct url for marker_icon
        if ($settings['marker_icon']) {
          $settings['marker_icon'] = file_create_url($settings['marker_icon']);
        }

        // Add each delta to the settings array.
        $data = array(
          'formatters' => array(
            'e_' . $eid . 'i_' . $instance['id'] => array(
              "settings" => $settings,
              "deltas" => array(
                'd_' . $delta => array(
                  'lat_p' => $item[$lat_key],
                  'lng_p' => $item[$lng_key],
                  'lat_d' => $item['lat_d'],
                  'lng_d' => $item['lng_d']
                ),
              ),
            ),
          ),
        );

        $map_element['googlemap']['#attached']['js'][] = array(
          'data' => array('netloadrouteGooglemaps' => $data),
          'type' => 'setting',
        );

        $element[$delta] = $map_element;
      }
      break;

  }
  return $element;
}



/**
 * Implements hook_field_widget_settings_form().
 */
function net_load_route_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['scrollwheel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scroll Zoom'),
    '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
    '#default_value' => isset($settings['scrollwheel']) ? $settings['scrollwheel'] : FALSE,
  );
  $form['marker_draggable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Draggable Marker'),
    '#description' => t('Enabling this will allow the user to darg/drop the marker to select a location.'),
    '#default_value' => isset($settings['marker_draggable']) ? $settings['marker_draggable'] : FALSE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function net_load_route_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //die('net_load_route_field_field_widget_form');

  // In order to make Geolocation field work with the popular Field collection module
  // we check if our map widget is part of a Field collection and add the
  // #field_parents delta.
  if ($instance['entity_type'] == 'field_collection_item') {
    $depth = count($element['#field_parents']) - 1;
    $parent_delta = $element['#field_parents'][$depth];
    $id = $instance['id'] . '-' . $parent_delta . '-' . $delta;
  }
  else {
    $id = $instance['id'] . '-' . $delta;
  }

  $lat_value_p = isset($items[$delta]['lat_p']) ? $items[$delta]['lat_p'] : NULL;
  $lng_value_p = isset($items[$delta]['lng_p']) ? $items[$delta]['lng_p'] : NULL;
  $lat_value_d = isset($items[$delta]['lat_d']) ? $items[$delta]['lat_d'] : NULL;
  $lng_value_d = isset($items[$delta]['lng_d']) ? $items[$delta]['lng_d'] : NULL;
  
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {

    case 'load_route_widget':
      $element['address_p'] = array(
        '#type' => 'item',
        '#title' => $element['#title'],
        '#prefix' => '<div id="net-load-route-address-p-' . $id . '" class="net-load-route-address">',
        '#suffix' => '</div>',
        '#required' => $instance['required'],
      );
      $element['address_d'] = array(
        '#type' => 'item',
        '#title' => $element['#title'],
        '#prefix' => '<div id="net-load-route-address-d-' . $id . '" class="net-load-route-address">',
        '#suffix' => '</div>',
        '#required' => $instance['required'],
      );
      $element['address_p']['field'] = array(
        '#type' => 'textfield',
        '#maxlength' => 120,
      );
      $element['address_d']['field'] = array(
        '#type' => 'textfield',
        '#maxlength' => 120,
      );
      $element['address_p']['geocode'] = array(
        '#prefix' => '<span id="net-load-route-address-geocode-p-' . $id . '" class="net-load-route-address-geocode">',
        '#suffix' => '</span>',
        '#markup' => t('Get location (pickup)'),
      );
      $element['address_d']['geocode'] = array(
        '#prefix' => '<span id="net-load-route-address-geocode-d-' . $id . '" class="net-load-route-address-geocode">',
        '#suffix' => '</span>',
        '#markup' => t('Get location (destination)'),
      );
      $element['help_p'] = array(
        '#prefix' => '<div id="net-load-route-help-p-' . $id . '" class="net-load-route-help">',
        '#suffix' => '</div>',
        '#markup' => t('Enter an address / location in the pickup location textfield'),
      );
      $element['help_d'] = array(
        '#prefix' => '<div id="net-load-route-help-d-' . $id . '" class="net-load-route-help">',
        '#suffix' => '</div>',
        '#markup' => t('Enter an address / location in the destination textfield'),
      );
      $element['googlemap'] = array(
        '#prefix' => '<div id="net-load-route-map-' . $id . '" class="net-load-route-map" style="width:100%;height:400px;">',
        '#suffix' => '</div>',
      );
      // Presentational item.
      $element['latitem_p'] = array(
        '#type' => 'item',
        '#title' => t('Latitude (pickup):'),
        '#prefix' => '<div id="net-load-route-lat-item-p-' . $id . '" class="net-load-route-lat-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="net-load-route-lat-item-value=p">' . $lat_value_p . '</span>',
        '#required' => $instance['required'],
      );
      $element['latitem_d'] = array(
        '#type' => 'item',
        '#title' => t('Latitude (destination):'),
        '#prefix' => '<div id="net-load-route-lat-item-d-' . $id . '" class="net-load-route-lat-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="net-load-route-lat-item-value-d">' . $lat_value_d . '</span>',
        '#required' => $instance['required'],
      );
      $element['lat_p'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="net-load-route-lat-p-' . $id . '" class="net-load-route-lat">',
        '#suffix' => '</div>',
        '#default_value' => $lat_value_p,
      );
      $element['lat_d'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="net-load-route-lat-d-' . $id . '" class="net-load-route-lat">',
        '#suffix' => '</div>',
        '#default_value' => $lat_value_d,
      );
      // Presentational item.
      $element['lngitem_p'] = array(
        '#type' => 'item',
        '#title' => t('Longitude (pickup):'),
        '#prefix' => '<div id="net-load-route-lng-item-p-' . $id . '" class="net-load-route-lng-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="net-load-route-lat-item-value-p">' . $lat_value_p . '</span>',
        '#required' => $instance['required'],
      );
      $element['lngitem_d'] = array(
        '#type' => 'item',
        '#title' => t('Longitude (destination):'),
        '#prefix' => '<div id="net-load-route-lng-item-d-' . $id . '" class="net-load-route-lng-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="net-load-route-lat-item-value-d">' . $lat_value_d . '</span>',
        '#required' => $instance['required'],
      );
      $element['lng_p'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="net-load-route-lng-p-' . $id . '" class="net-load-route-lng">',
        '#suffix' => '</div>',
        '#default_value' => $lng_value_p,
      );
      $element['lng_d'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="net-load-route-lng-d-' . $id . '" class="net-load-route-lng">',
        '#suffix' => '</div>',
        '#default_value' => $lng_value_d,
      );
      $element['remove_p'] = array(
        '#prefix' => '<div id="net-load-route-remove-p-' . $id . '" class="net-load-route-remove"><span>',
        '#suffix' => '</span></div>',
        '#markup' => t('Remove (pickup)'),
      );
      $element['remove_d'] = array(
        '#prefix' => '<div id="net-load-route-remove-d-' . $id . '" class="net-load-route-remove"><span>',
        '#suffix' => '</span></div>',
        '#markup' => t('Remove (destination)'),
      );

      // Attach CSS and JS files via FAPI '#attached'.
      $element['googlemap']['#attached']['css'][] = drupal_get_path('module', 'net_load_route_field') . '/net_load_route_field.css';
      $element['googlemap']['#attached']['js'][] = array(
        'data' => '//maps.google.com/maps/api/js?sensor=false',
        'type' => 'external',
      );
      $element['googlemap']['#attached']['js'][] = array(
        'data' => '//www.google.com/jsapi',
        'type' => 'external',
      );
      $element['googlemap']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'net_load_route_field') . '/net_load_route_field_widget.js',
        'type' => 'file',
        'scope' => 'footer',
      );

      // Make defaults available as javascript settings. In JS files use:
      // Drupal.settings.mapDefaults.lat
      $map_defaults_lat_p = ($lat_value_p) ? $lat_value_p : '';
      $map_defaults_lng_p = ($lng_value_p) ? $lng_value_p : '';
      $map_defaults_lat_d = ($lat_value_d) ? $lat_value_d : '';
      $map_defaults_lng_d = ($lng_value_d) ? $lng_value_d : '';
      $map_defaults = array(
        $id => array(
          'lat_p' => $map_defaults_lat_p,
          'lng_p' => $map_defaults_lng_p,
          'lat_d' => $map_defaults_lat_d,
          'lng_d' => $map_defaults_lng_d,
        ),
      );
      $data = array(
        'defaults' => $map_defaults,
        'settings' => $instance['widget']['settings'],
      );
      $element['googlemap']['#attached']['js'][] = array(
        'data' => array('net_load_route_field' => $data),
        'type' => 'setting',
      );

      $element['field_type'] = array('#type' => 'value', '#value' => $field['type']);
      $element['#element_validate'] = array('net_load_route_field_field_widget_validate');
      $element['#element_validate'][] = 'net_load_route_field_field_widget_set_value';

      break;
  }
  return $element;
}

/**
 * Validation handler for net_load_route_field_field_widget_form().
 */
function net_load_route_field_field_widget_validate($element, &$form_state, $form) {
  if ($element['#required']) {
    if (!$element['lat_p']['#value'] || !$element['lng_p']['#value']) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
    if (!$element['lat_d']['#value'] || !$element['lng_d']['#value']) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
  }
  else {
    switch (TRUE) {
      case $element['lng_p']['#value'] && !$element['lat_p']['#value']:
        form_error($element, t('!name field is incomplete, latitude value is missing.', array('!name' => $element['#title'])));
        break;

      case !$element['lng_p']['#value'] && $element['lat_p']['#value']:
        form_error($element, t('!name field is incomplete, longitude value is missing.', array('!name' => $element['#title'])));
        break;

      case $element['lng_d']['#value'] && !$element['lat_d']['#value']:
        form_error($element, t('!name field is incomplete, latitude value is missing.', array('!name' => $element['#title'])));
        break;

      case !$element['lng_d']['#value'] && $element['lat_d']['#value']:
        form_error($element, t('!name field is incomplete, longitude value is missing.', array('!name' => $element['#title'])));
        break;
    }
  }
}

function net_load_route_field_field_widget_set_value($element, &$form_state, $form) {
  $values = &drupal_array_get_nested_value($form_state['values'], $element['#parents']);
}